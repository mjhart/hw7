function x=localSearch(funcToOptimize,proposalFunc,startingX,epsilon,lowerBoundOnX,upperBoundOnX,timeDelta,funcDelta)
% This general-purpose optimization routine aims to minimize funcToOptimize
% starting from the initial guess startingX, via proposals generated by
% proposalFunc (the two functions are specified via function handles). When
% optimizing a function whose inputs have lower and upper bounds, the
% proposal xp=proposalFunc(x) has all of its entries that are less than
% lowerBoundOnX rounded up to lowerBoundOnX, and all of its entries greater
% than upperBoundOnX rounded down to upperBoundOnX before funcToOptimize is
% evaluated on xp (these bounds can be -inf and +inf to make them effectively 
% ignored). The proposal is accepted if it improves the function value, or does
% not make it worse by more than epsilon. The routine terminates when timeDelta
% seconds have passed without the best value found so far of funcToOptimize
% improving by funcDelta.
lastUpdate = now;

x = startingX;
while (now - lastUpdate) * 86400 < timeDelta
    xp = proposalFunc(x);
    for i = 1:length(xp)
        if xp(i) > upperBoundOnX
            xp(i) = upperBoundOnX;
        elseif xp(i) < lowerBoundOnX
            xp(i) = lowerBoundOnX;
        end
    end
    
    if funcToOptimize(xp) + epsilon <= funcToOptimize(x)
        funcToOptimize(xp)
        x = xp;
        if x - xp > funcDelta
            lastUpdate = now;
        end
    end
end